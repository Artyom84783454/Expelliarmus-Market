name: Docker compose CI and push

on:
  push:
    branches: [ "dev", "master","test" ]
  pull_request:
    branches: [ "dev", "master","test" ]

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.run_id }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Sanitize repo slug
        uses: actions/github-script@v6
        id: repo_slug
        with:
            result-encoding: string
            script: return `ghcr.io/${github.repository}`.toLowerCase()

      - name: Setting Environment
        env:
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_HOST: ${{ vars.REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_CONNECTION: ${{ vars.DB_CONNECTION }}
          APP_URL: ${{ secrets.APP_URL }}
          APP_KEY: ${{ secrets.APP_KEY }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          SANCTUM_STATEFUL_DOMAINS: ${{ secrets.SANCTUM_STATEFUL_DOMAINS }}
          SESSION_DOMAIN: ${{ secrets.SESSION_DOMAIN }}
        run: |
          cp .env.prod .env
          sed -i "s|^REDIS_HOST=.*|REDIS_HOST=${REDIS_HOST}|" .env
          sed -i "s|^PROJECT_NAME=.*|PROJECT_NAME=${PROJECT_NAME}|" .env
          sed -i "s|^SESSION_DOMAIN=.*|SESSION_DOMAIN=${SESSION_DOMAIN}|" .env
          sed -i "s|^SANCTUM_STATEFUL_DOMAINS=.*|SANCTUM_STATEFUL_DOMAINS=${SANCTUM_STATEFUL_DOMAINS}|" .env
          sed -i "s|^FRONTEND_URL=.*|FRONTEND_URL=${FRONTEND_URL}|" .env
          sed -i "s|^APP_URL=.*|APP_URL=${APP_URL}|" .env
          sed -i "s/^DB_HOST=.*/DB_HOST=${DB_HOST}/" .env
          sed -i "s/^DB_CONNECTION=.*/DB_CONNECTION=${DB_CONNECTION}/" .env
          sed -i "s/^DB_DATABASE=.*/DB_DATABASE=${DB_DATABASE}/" .env
          sed -i "s/^DB_USERNAME=.*/DB_USERNAME=${DB_USERNAME}/" .env
          sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=${DB_PASSWORD}/" .env
          sed -i "s/^REDIS_PASSWORD=.*/REDIS_PASSWORD=${REDIS_PASSWORD}/" .env
          sed -i "s/^APP_KEY=.*/APP_KEY=${APP_KEY}/" .env
          echo "Updated docker .env:"
          cat .env

      - name: Copy .env to backend
        working-directory: ${{ github.workspace }}
        run: |
          cp .env ./backend/
      
      - name: Define image tags
        id: tags
        run: echo "slug=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Patch image names in docker-compose.build.yml
        run: |
          sed -i "s|image:.*-php|image: ${{ steps.tags.outputs.slug }}-php|" docker-compose.build.yml
          sed -i "s|image:.*-nginx|image: ${{ steps.tags.outputs.slug }}-nginx|" docker-compose.build.yml
          sed -i "s|image:.*-npm|image: ${{ steps.tags.outputs.slug }}-npm|" docker-compose.build.yml
          sed -i "s|image:.*-queue|image: ${{ steps.tags.outputs.slug }}-queue|" docker-compose.build.yml
          sed -i "s|image:.*-scheduler|image: ${{ steps.tags.outputs.slug }}-scheduler|" docker-compose.build.yml

      - name: Build Docker Compose images
        run: docker compose -f docker-compose.build.yml build

      - name: Push Docker Compose images
        run: docker compose -f docker-compose.build.yml push

      - name: Show image sizes
        run: docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
      