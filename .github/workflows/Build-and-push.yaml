name: Docker compose CI and push

on:
  push:
    branches: [ "dev", "master","test" ]
  pull_request:
    branches: [ "dev", "master","test" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}/expelliarmus-market

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.run_id }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Setting Environment
        env:
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          DB_HOST: ${{ vars.DB_HOST }}
          DB_CONNECTION: ${{ vars.DB_CONNECTION }}
          APP_KEY: ${{ secrets.APP_KEY }}

        run: |
          cp .env.example .env
          sed -i "s/^DB_HOST=.*/DB_HOST=${DB_HOST}/" .env
          sed -i "s/^DB_CONNECTION=.*/DB_CONNECTION=${DB_CONNECTION}/" .env
          sed -i "s/^DB_DATABASE=.*/DB_DATABASE=${DB_DATABASE}/" .env
          sed -i "s/^DB_USERNAME=.*/DB_USERNAME=${DB_USERNAME}/" .env
          sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=${DB_PASSWORD}/" .env
          sed -i "s/^REDIS_PASSWORD=.*/REDIS_PASSWORD=${REDIS_PASSWORD}/" .env
          sed -i "s/^APP_KEY=.*/APP_KEY=${APP_KEY}/" .env
          echo "Updated .env:"
          cat .env
      - name: Copy .env to backend
        working-directory: ${{ github.workspace }}
        run: |
          cp .env ./backend/
      
      - name: Build and push Docker Compose services
        uses: docker/build-push-action@v3
        with:
            context: .
            file: docker-compose.yml
            push: true
            tags: |
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-queue:latest
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-queue:${{ github.sha }}
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-php:latest
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-php:${{ github.sha }}
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-nginx:latest
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-nginx:${{ github.sha }}
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-npm:latest
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-npm:${{ github.sha }}
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-scheduler:latest
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-scheduler:${{ github.sha }}
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-redis:latest
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-redis:${{ github.sha }}
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-postgres:latest
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-postgres:${{ github.sha }}
  
      - name: Show pushed images
        run: |
            echo "Pushed images to $REGISTRY/${{ env.IMAGE_NAMESPACE }}-*"
            docker run --rm mplatform/mquery "${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-php:latest"

      - name: Show image sizes
        run: docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
      