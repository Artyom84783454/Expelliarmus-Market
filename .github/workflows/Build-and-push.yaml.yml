name: Docker compose CI and push

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest


    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.run_id }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}
      - name: Setting Environment
        env:
          PROJECT_NAME: ${{ vars.PROJECT_NAME }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_PASSWORD: ${{ secrets.DB_USER_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          DB_HOST: postgres
          APP_KEY: ${{ secrets.APP_KEY }}
          
        run: |
          cp .env.example .env

          
          sed -i "s/^DB_DATABASE=.*/DB_DATABASE=${DB_DATABASE}/" .env
          sed -i "s/^DB_USERNAME=.*/DB_USERNAME=${DB_USERNAME}/" .env
          sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=${DB_PASSWORD}/" .env
          sed -i "s/^REDIS_PASSWORD=.*/REDIS_PASSWORD=${REDIS_PASSWORD}/" .env
          sed -i "s/^APP_KEY=.*/APP_KEY=${APP_KEY}/" .env

          echo "Updated .env:"
          cat .env
          
      - name: Debug current directory
        run: |
          pwd
          ls -a
        
      - name: Verify .env file exists
        run: |
            if [ ! -f .env ]; then
              echo ".env file does not exist!"
              exit 1
            fi
        
      - name: Copy .env to backend
        working-directory: ${{ github.workspace }}
        run: |
            cp .env ./backend/
            ls -a ./backend/

      - name: Start Docker Compose
        run: docker compose up -d --build

      - name: Install Composer Dependencies
        run: docker exec php composer install

      - name: Install NPM Dependencies
        run: docker exec npm npm install

      - name: Wait for PostgreSQL to be ready
        run: |
          echo "‚è≥ Waiting for PostgreSQL..."
          for i in {1..12}; do
            docker exec php php artisan migrate:status && break || sleep 5
          done
      
      - name: Run Migrations and Seed Database
        run: docker exec php php artisan migrate:fresh --seed --storage-clean
      

      - name: Create Storage Link
        run: docker exec php php artisan storage:link

      - name: Generate Application Key
        run: docker exec php php artisan key:generate
      #- name: Start frontend dev server
      #  run: make front-dev

      #- name: Build with Docker Compose
      #  run: docker-compose -f docker-compose.yml build

      #- name: Build Docker image
      #  run: docker compose -f compose.yaml up -d --build

      #- name: Push Docker images to GHCR
       # run: docker compose -f compose.yaml push

    


